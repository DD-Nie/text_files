git reset HEAD file可以把暂缓区的内容清空防止错误的commit

git reset --hard 234u4857 回退到指定目录的版本
git reset --hard HEAD^ 回退到上一个版本
git reset --hard HEAD^^ 回退到上上个版本
git reset --hard HEAD^10 回退到上10个版本

git reflog 查看所有的历史命令
git add 加入暂缓区
git add -A 添加所有的文件到暂缓区
git commit -m “备注信息” 提交命令
git log 查看所有的日志内容
git init 初始化仓库

git rm test.txt 删除test.txt 并且保存 git commit -m “删除了test.txt”

git remote rm origin 删除远程仓库
git remote add origin git@github.com:DD-Nie/CheckOA.git 添加一个远程库叫origin的库
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

$ git fetch origin  //下载远程仓库内容
$ git checkout -b serverfix origin/serverfix   //在origin/serverfix基础上 创建serverfix分支
$git merge origin/serverfix 把远程分支的内容合并到当前分支上

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；-u表示 origin 为默认的远程仓库

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

git clone git@github.com:michaelliao/gitskills.git 克隆代码仓库到本地

要克隆一个仓库，首先必须知道仓库的地址 例如 git@github.com:DD-Nie/CheckOA.git ，然后使用git clone git@github.com:DD-Nie/CheckSystem.git 命令克隆。
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。


git branch 查看分支
git branch <name> 创建分支
git checkout <name> 切换分支
git checkout -b <name> 创建加切换分支
git merge <name> 合并某分支到当前分支
git branch -d <name> 删除某分支
git branch -D <name> 强制删除某分支



git pull 合并远程仓库的文件
git push origin master 上传到远程仓库

git init --separate-git-dir=<dir> 将 git 文件放到指定的文件目录下

git branch :查看分支
git branch [branchname]:创建分支
git checkout [branchname]:切换到某个分支
git checkout -b [branchname]: 创建并且切换到新建的分支
git branch -d [branchname]: 删除某个分支
git branch -D [branchname]: 强制删除某个分支


merge 部分文件
因为 git 无法 merge 部分文件 所以可以进行分布操作
如果想要将 A 分支的部分文件 merge 到 B分支 (A B 分支已经存在)
git checkout B
git checkout -b B-temp
git merge A
git checkout B
git chekcout B-temp 文件1 文件2 文件3
git add .
git commit -m "merge 部分文件"


//变基 test为当前分支
git rebase master
git checkout master
git merge test

$ git rebase --onto master server client

git add --patch

git log --no-merges

$ git branch nhz/te_xing master 创建分支 用一个 nhz 名词空间 表示作者

Git的配置:
# 显示当前的Git配置
$ git config --list

#设置用户名和邮箱，即提交代码时的用户信息
$ git config [--global] user.name "[name]"
$ git config [--global] user.email "[email address]"

添加/删除文件(到暂存区，即add操作）
#可以添加一个或多个
$ git add <file1> <file2>...

#添加所有修改的和新添加的
$ git add .
#另一种写法
$ git add -A

#添加指定目录
$ git add <dirname>

#由暂存区恢复到工作区（发现提交错了，退回一步）
$ git reset HEAD <file> 

#恢复上一次add提交的所有file
$ git reset HEAD

#撤销修改操作，恢复到修改之前的，撤销add后位于工作区下进行的
$ git checkout -- <file>

#删除文件,并将文件放入暂存区
$ git rm <file1> <file2>
#改文件名，并将修改后的文件放入暂存区
$ git mv <file-original> <file-rename>


提交到本地仓库（commit操作)
#提交暂存区的所有文件(后面的message不可缺少)
$ git commit -m <message>
#提交暂存区的指定文件
$ git commit <file1> <file2> -m <message>

.gitignore的配置：

缘由：当我们导入一个git项目时，开发环境会改变里面的一些配置，当我们修改完代码后，add，commit操作后，系统更改的配置信息，并不想去提交，这个时候就会用到这个配置，配置完成后，才更好的去add .和commit -m去操作。

#要在Git BashHere这里面操作
user@amelon MINGW64 ~/Desktop/git (master)
$ touch .gitignore

user@amelon MINGW64 ~/Desktop/git (master)
$
用法规则和语义：

# 此为注释 – 将被 Git 忽略

*.a       		# 忽略所有 .a 结尾的文件
!lib.a    		# 但 lib.a 除外
/TODO     	# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
build/    		# 忽略 build/ 目录下的所有文件
doc/*.txt 		# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt


注意：如果你是新加的，这里需要注意的是.gitignore只能作用于没有被track的文件，也就是工作区的文件，对于add，commit操作后的文件是没有作用的，这个时候需要先把本地的缓存删除，在去提交，就可以实现忽略整个仓库文件了。

git rm -r --cached .
git add .
git commit -m 'update .gitignore'
